/**
 * Created by wmy_one on 2016/5/22.
 * 这一节将会简单的介绍，使用Java进行的一些逻辑运算符需要注意的事项：
 * 1）赋值运算：
 * short s;
 * s = s + 5 和 s += 5的区别如下：
 * s = s + 5这样写，编译失败，因为s会被提升为int类型，运算后的结果还是int类型，无法赋值给short类型；
 * s += 5这样写，编译通过，因为+=运算符在给s赋值时，自动完成了强制转换操作。
 *
 * 2）&和&&的特点：
 * &：无论左右两边是true还是false，两边都进行运算操作；
 * &&：当左边为false时，右边不进行运算操作；
 * 通常情况下，使用&&，此外，&除了连接两个boolean变量外，也可以用于位运算。
 *
 * 3）|和||特点：
 * |：无论左右两边是true还是false，两边都进行运算操作；
 * ||：当左边为true时，右边不进行运算操作；
 * 通常情况下，使用||，此外，|除了连接两个boolean变量外，也可以用于位运算。
 *
 * 4）位运算符，<<、>>和>>>的特点：
 * <<：其实就是乘以2的移动的位数次幂；
 * >>：其实就是除以2的移动的位数次幂；
 * >>>：是无符号移位，也是除以2的移动的位数次幂；
 * 其中，>>和>>>运算，都是两个int类型的数据进行运算，结果仍为int类型，也就是将运算结果的小数部分舍弃；
 *
 * >>：移位后，最高位补什么，是由原来数据的最高位的值来确定，
 *      如果最高位是0，右移后，左边用0补齐；
 *      如果最高位是1，右移后，左边用1补齐。
 * >>>：无论最高位是什么，右移后，左边都用0补齐。
 *
 *5）位运算符，^和~的特点：
 * ^：表示异或运算，一个数与另一个数异或两次，结果还是原来的那个数，常用与加密算法。
 * ~：表示取反运算，对一个数进行取反操作后的结果对应的十进制数为：将原来的数取反后的结果减1，然后将减1后的结果取反，
 *   并转为十进制数后，加上一个负号，这个结果就是原来数据取反后的结果，前面写的过程都是在二进制形式下进行的运算。
 *
 * 6）负数等于正数取反后加1。
 *
 */
public class ArithmeticDemo {
    public static void main (String args[]){
        short s = 1;
        //s = s + 3; 此操作将编译失败
        s += 3;  //此操作将编译通过
        System.out.println(s);

        //交换两个变量的值，方法如下：
        //方法一：
        int m = 3, n = 6, temp;
        System.out.println("m和n的初始值如下：");
        System.out.println("m = "+ m + ", n = " + n);
        temp = m;     //在实际编程中，常常使用此方法
        m = n;
        n = temp;
        System.out.println("方法一的结果如下：");
        System.out.println("m = "+ m + ", n = " + n);

        //方法二：
        int a = 3, b = 6;
        b = b + a;    //如果a和b的值非常大，可能超出int类型的范围
        a = b - a;
        b = b - a;
        System.out.println("方法二的结果如下：");
        System.out.println("a = " + a + ", b = " + b);

        //方法三：
        int c = 3,d = 6;
        d = d ^ c;   //此方法的逻辑性比较强，不易理解
        c = d ^ c;   //(d ^ c) ^ c
        d = d ^ c;   //d ^ (d ^ c)
        System.out.println("方法三的结果如下：");
        System.out.println("c = " + c + ", d = " + d);
    }
}