/**
 * Created by wmy_one on 2016/6/11.
 * 这一节将会简单的介绍Java中的继承。
 * 1）继承的特点
 * 1、提高了代码的复用性；
 * 2、让类之间产生了关系，有了这个关系，才有了多态的特性。
 *
 * 注意：不要为了获取其他类的功能，简化代码而使用继承，
 *       必须是类与类之间有所属关系，才可以使用继承。
 *
 * 3）Java中：只支持单继承，不支持多继承。
 * 因为多继承容易带来安全隐患：当多个父类中定义相同的功能时。
 * 并且功能中的内容不同时，子类对象不确定要执行哪一个。
 * 但是Java保留了这种机制，并用另一种体现形式来完成表示，多实现。
 *
 * Java支持多层继承，也就是继承体系，如何使用呢？
 * ①、想要使用体系，先查阅父类的描述，因为父类中定义的是该体系中的共性功能；
 * ②、通过了解共性功能，就可以知道该体系的基本功能，此时，这个体系，已经可以基本使用了。
 *
 * 在具体使用时，要创建最子类的对象，为什么呢？
 * 1、因为有可能父类不能创建对象；
 * 2、创建子类对象可以使用更多的功能，包括基本的也包括特有的。
 *
 * 简而言之：查阅父类功能，创建子类对象使用功能。
 *
 * 4）子类和父类中的同名变量
 * 如果子类和父类中出现非私有的同名变量时，子类要访问本类中的变量，使用this；
 * 子类要访问父类中同名变量，使用super。
 * this和super用法几乎一致，this代表本类对象的引用，super代表父类对象的引用。
 *
 * 5）子类和父类中的同名函数
 * 如果子类出现和父类一模一样的函数时 ，当子类对象调用该函数时，会运行子类函数的内容；
 * 如同父类的函数被覆盖一样。这种情况是函数的另一个特性：重写（覆盖）
 *
 * 注意：
 * 1、子类覆盖父类，必须保证子类权限大于等于父类权限，才可以覆盖，否则编译失败；
 * 2、静态只能覆盖静态。
 *
 * 重载：只看同名函数的参数列表；
 * 重写：子父类方法要一模一样。
 *
 * 6）子父类中的构造函数
 * 当对子类对象进行初始化时，父类的构造函数也会运行，这是因为子类的构造函数的第一行默认有一条隐式语句：super();
 * super()：将会访问父类中空参数的构造函数，而且子类中所有的构造函数第一行默认都是：super();
 *
 * 为什么子类要访问父类中的构造函数？
 * 因为父类中的数据子类可以直接获取，所以子类对象建立时，需要先查看父类是如何对这些数据进行初始化的；
 * 因此，子类对象初始化时，要先访问一下父类中的构造函数。
 * 如果要访问父类中指定的构造函数，可以通过手动定义super语句的方式来指定。
 *
 * 注意：super语句一定要定义在子类构造函数的第一行。
 *
 * 7）子类的实例化过程
 * 子类中所有的构造函数，默认都会访问父类总空参数的构造函数；
 * 因为子类中每个构造函数内的第一行都有一句隐式的super();
 *
 * 当父类中没有空参数的构造函数时，子类必须手动定义super语句的形式，
 * 来指定要访问父类中的构造函数。
 *
 * 当然，子类中构造函数的第一行也可以手动指定this语句来访问本类中的构造函数。
 * 子类中至少会有一个构造函数会访问父类中的构造函数。
 *
 * 注意;
 * this和super语句必须在构造函数中的第一行，因为对象的初始化动作先执行；
 * 但是两者不能同时出现，因为两则都要在第一行。
 */

/**
 * 定义一个Person类，用于描述Student类和Worker类中的共性，是他们的父类
 */
class Person{
    String name;
    int age;
    int num = 6;

    /**
     * 定义一个空参数的构造函数，用于给对应的对象进行初始化。
     */
    Person(){
        System.out.println("Person.....");
    }

    /**
     * 定义一个int类型参数的构造函数，用于给对应的对象进行初始化。
     * @param x  建立对应的对象时，传进去的参数
     */
    Person(int x){
        System.out.println("Person....."+x);
    }
}

/**
 * 定义一个Student类，用于描述学生的信息，并使用extends关键字继承Person类，是他的子类
 */
class Student extends Person {

    /**
     * 定义一个空参数的构造函数，用于给对应的对象进行初始化。
     */
    Student(){
        //此处，默认有一条语句：super();
        System.out.println("Student.....");
    }

    /**
     * 定义一个int类型参数的构造函数，用于给对应的对象进行初始化。
     * @param x  建立对应的对象时，传进去的参数
     */
    Student(int x){
        //此处，默认有一条语句：super();
        super(30);    //此语句表示调用父类中的Person(int num)构造函数
        System.out.println("Student...."+x);
    }

    /**
     * 定义一个方法，用于鼓励学生，好好学习
     */
    void studyFun(){
        System.out.println("Good study !");
    }

    /**
     * 定义一个方法，用于显示学生的信息
     */
    void showFun(){

        //这两条语句执行结果一样，因为没有父类对象，所以两者指向同一对象(子类对象)
        System.out.println("The number of student："+this.num);
        System.out.println("The number of student："+super.num);

        System.out.println("The Name of student："+super.name);
        System.out.println("The Age of student："+super.age);
    }
}

/**
 * 定义一个Worker类，用于描述工人的信息，并使用extends关键字继承Person类，是他的子类
 */
class Worker extends Person {
    /**
     * 定义一个方法，用于鼓励工人好好工作
     */
    void workFun(){
        System.out.println("Good work !");
    }
}

public class ObjectDemo5 {
    public static void main(String[] args){
        Student s = new Student(20);  //建立一个Student类型的变量，或者说建立实例化Student类
        s.name = "David";
        s.age = 25;
        s.showFun();    //调用类中的方法
    }
}
